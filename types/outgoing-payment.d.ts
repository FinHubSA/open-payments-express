/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * The URL of the incoming payment that is being paid.
 */
export type Receiver = string;
/**
 * The assetCode is a code that indicates the underlying asset. An ISO4217 currency code should be used whenever possible. The ISO4217 representation of the US Dollar is USD.
 */
export type AssetCode = string;
/**
 * The number of decimal places that defines the scale of the smallest divisible unit for the given asset code. It determines how an integer amount is scaled to derive the actual monetary value. For example, USD has an asset scale of 2 with the smallest unit being 0.01. An integer amount of `1000` with an `assetCode` of `USD` and `assetScale` of `2` translates to $10.00.
 */
export type AssetScale = number;
/**
 * The assetCode is a code that indicates the underlying asset. An ISO4217 currency code should be used whenever possible. The ISO4217 representation of the US Dollar is USD.
 */
export type AssetCode1 = string;
/**
 * The number of decimal places that defines the scale of the smallest divisible unit for the given asset code. It determines how an integer amount is scaled to derive the actual monetary value. For example, USD has an asset scale of 2 with the smallest unit being 0.01. An integer amount of `1000` with an `assetCode` of `USD` and `assetScale` of `2` translates to $10.00.
 */
export type AssetScale1 = number;
/**
 * The assetCode is a code that indicates the underlying asset. An ISO4217 currency code should be used whenever possible. The ISO4217 representation of the US Dollar is USD.
 */
export type AssetCode2 = string;
/**
 * The number of decimal places that defines the scale of the smallest divisible unit for the given asset code. It determines how an integer amount is scaled to derive the actual monetary value. For example, USD has an asset scale of 2 with the smallest unit being 0.01. An integer amount of `1000` with an `assetCode` of `USD` and `assetScale` of `2` translates to $10.00.
 */
export type AssetScale2 = number;

/**
 * An **outgoing payment** resource represents a payment that will be, is currently being, or has previously been, sent from the wallet address.
 */
export interface OutgoingPayment {
  /**
   * The URL of the wallet address from which this payment is sent.
   */
  walletAddress: string;
  /**
   * The access token required to access the resource. This token is provided when a grant is created.
   */
  accessToken: string;
  /**
   * The URL identifying the outgoing payment.
   */
  id?: string;
  /**
   * The URL of the quote defining this payment's amounts.
   */
  quoteId?: string;
  /**
   * Describes whether the payment failed to send its full amount.
   */
  failed?: boolean;
  receiver?: Receiver;
  receiveAmount?: Amount;
  debitAmount?: Amount1;
  sentAmount?: Amount2;
  /**
   * Additional metadata associated with the outgoing payment. (Optional)
   */
  metadata?: {
    [k: string]: unknown;
  };
  /**
   * The date and time when the outgoing payment was created.
   */
  createdAt?: string;
}
/**
 * The total amount that should be received by the receiver when this outgoing payment has been paid.
 */
export interface Amount {
  /**
   * The value is an unsigned 64-bit integer amount, represented as a string.
   */
  value: string;
  assetCode: AssetCode;
  assetScale: AssetScale;
  [k: string]: unknown;
}
/**
 * The total amount that should be deducted from the sender's account when this outgoing payment has been paid.
 */
export interface Amount1 {
  /**
   * The value is an unsigned 64-bit integer amount, represented as a string.
   */
  value: string;
  assetCode: AssetCode1;
  assetScale: AssetScale1;
  [k: string]: unknown;
}
/**
 * The total amount that has been sent under this outgoing payment.
 */
export interface Amount2 {
  /**
   * The value is an unsigned 64-bit integer amount, represented as a string.
   */
  value: string;
  assetCode: AssetCode2;
  assetScale: AssetScale2;
  [k: string]: unknown;
}
